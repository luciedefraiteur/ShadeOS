#!/usr/bin/env python3
"""
Point d'entr√©e principal pour le CheatCode V4.
Lance une session autonome o√π ShadEOS utilise ses pouvoirs √©tendus.
"""

import sys
import time
from pathlib import Path

# Ajout des chemins n√©cessaires
sys.path.append(str(Path(__file__).parent))
from core.cheat_orchestrator import CheatOrchestrator

# Import du CreativeInterpreter666
from core.creative_interpreter_666 import CreativeInterpreter666

MAX_CYCLES = 10  # S√©curit√© pour √©viter les boucles infinies

def main():
    """Boucle principale de la session autonome de ShadEOS."""
    print("="*60)
    print("[CHEAT] SHADEOS CHEATCODE V4 - SESSION AUTONOME")
    print("="*60)
    print("Initialisation de l'orchestrateur et du moteur de cheat...")
    
    orchestrator = CheatOrchestrator("cheatCode/prompts")
    engine = orchestrator.engine
    interpreter = CreativeInterpreter666() # Initialiser l'interpr√©teur

    # 1. D√©marrer la session OpenAI
    print("\n[ETAPE 1] D√©marrage de la session OpenAI...")
    start_result = engine.demarrer_gemini_cli()
    if not start_result.get('success'):
        print(f"[ERREUR FATALE] Impossible de d√©marrer la session OpenAI.")
        print(f"   Raison: {start_result.get('error', 'Inconnue')}")
        sys.exit(1)
    print("[OK] Session OpenAI d√©marr√©e avec succ√®s !")

    # 2. Boucle d'ex√©cution autonome
    print("\n[ETAPE 2] Lancement de la boucle d'ex√©cution autonome...")
    for cycle in range(1, MAX_CYCLES + 1):
        print(f"\n--- CYCLE AUTONOME #{cycle}/{MAX_CYCLES} ---")
        try:
            # a. G√©n√©rer le prompt
            print("   G√©n√©ration du prompt pour ShadEOS...")
            prompt = orchestrator.generer_prompt_shadeos()

            # b. Envoyer √† OpenAI pour d√©cision
            print("   Envoi du prompt √† OpenAI pour d√©cision...")
            ia_response = engine.envoyer_message_gemini(prompt, cycle)

            reponse_luciform = ia_response.get('reponse', '')
            print(f"   R√©ponse de l'IA (luciform):\n{reponse_luciform}")

            # c. Interpr√©ter la r√©ponse de l'IA (m√™me si elle est malform√©e)
            print("   Interpr√©tation de la r√©ponse de l'IA...")
            interpretation = interpreter.interpret_malformed_response(
                reponse_luciform, 'gemini', context=engine.session_context
            )
            print("   üîÆ Interpr√©tation cr√©ative :")
            print(f"     Type d'innovation : {interpretation['shadeos_suggestion']['innovation_type']}")
            print(f"     Suggestion : {interpretation['shadeos_suggestion']['shadeos_intent']}")
            print(f"     Roadmap : {interpretation['implementation_roadmap']}")

            if not ia_response.get('success'):
                print("   ‚ö†Ô∏è  L'IA n'a pas fourni de r√©ponse valide. Passage au cycle suivant.")
                time.sleep(5)
                continue

            # d. Ex√©cuter la r√©ponse (si elle est valide)
            print("   Ex√©cution de la r√©ponse luciform...")
            orchestrator.executer_reponse_shadeos(reponse_luciform, cycle)

            # Condition de sortie (si l'IA d√©cide de s'arr√™ter)
            if "<action_exit />" in reponse_luciform:
                print("   [FIN] L'IA a demand√© la fin de la session.")
                break

            print(f"   Cycle #{cycle} termin√©. Pause de 5 secondes...")
            time.sleep(5)

        except Exception as e:
            print(f"   [ERREUR MAJEURE] dans le cycle #{cycle}: {e}")
            print("   Tentative de poursuite apr√®s 10 secondes...")
            time.sleep(10)

    print("\n" + "="*60)
    print("[FIN] Session autonome termin√©e.")
    print("="*60)

if __name__ == "__main__":
    main()
