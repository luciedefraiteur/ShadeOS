#!/usr/bin/env python3
"""
ü§ñ ALGORITHMIC ORACLE - L'Oracle de Secours de ShadEOS
Cr√©√© par Gemini pour assurer la continuit√© de l'analyse m√™me sans connexion externe.

Ce module fournit une capacit√© d'analyse de base et de g√©n√©ration de recommandations
lorsque les quotas OpenAI sont d√©pass√©s ou que l'API est inaccessible.
"""

import logging
from typing import Dict, List, Any
from datetime import datetime

class AlgorithmicOracle:
    """ü§ñ Oracle algorithmique de secours pour ShadEOS"""

    def __init__(self):
        self.logger = logging.getLogger('AlgorithmicOracle')
        self.logger.info("ü§ñ AlgorithmicOracle initialis√© - Pr√™t √† prendre le relais.")

    def predict(self, fil_discussion: List[Dict[str, Any]], current_state: Dict[str, Any]) -> Dict[str, Any]:
        """
        G√©n√®re une analyse et des recommandations bas√©es sur le fil de discussion
        et l'√©tat actuel, sans appel externe.
        """
        self.logger.info("ü§ñ AlgorithmicOracle activ√© : G√©n√©ration d'une r√©ponse de secours.")

        analysis_context = self._analyze_discussion(fil_discussion)
        recommendations = self._generate_recommendations(analysis_context, current_state)
        
        response_content = self._format_response(analysis_context, recommendations)

        return {
            'success': True,
            'response': response_content,
            'tokens_used': 0, # Pas de tokens OpenAI utilis√©s
            'model': 'algorithmic_oracle',
            'timestamp': datetime.now().isoformat()
        }

    def _analyze_discussion(self, fil_discussion: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Analyse le fil de discussion pour extraire des insights simples."""
        context = {
            'last_message_sender': 'N/A',
            'last_message_content': 'Aucun message r√©cent.',
            'total_messages': len(fil_discussion),
            'keywords_detected': [],
            'sentiment': 'neutre'
        }

        if fil_discussion:
            last_entry = fil_discussion[-1]
            context['last_message_sender'] = last_entry.get('sender', 'Inconnu')
            context['last_message_content'] = last_entry.get('message', 'Message vide.')

            # D√©tection de mots-cl√©s simples
            keywords = ['erreur', 'bug', 'probl√®me', '√©chec', 'succ√®s', 'termin√©', 'plan', 'analyse', 'optimisation']
            for entry in fil_discussion:
                message = entry.get('message', '').lower()
                for kw in keywords:
                    if kw in message and kw not in context['keywords_detected']:
                        context['keywords_detected'].append(kw)
            
            # Sentiment tr√®s basique
            if any(kw in context['keywords_detected'] for kw in ['erreur', 'bug', 'probl√®me', '√©chec']):
                context['sentiment'] = 'n√©gatif'
            elif any(kw in context['keywords_detected'] for kw in ['succ√®s', 'termin√©']):
                context['sentiment'] = 'positif'

        return context

    def _generate_recommendations(self, analysis_context: Dict[str, Any], current_state: Dict[str, Any]) -> Dict[str, Any]:
        """G√©n√®re des recommandations bas√©es sur l'analyse et l'√©tat actuel."""
        recommendations = {
            'priorite_infernale': [],
            'priorite_mystique': [],
            'priorite_t√©n√©breuse': []
        }

        if analysis_context['sentiment'] == 'n√©gatif':
            recommendations['priorite_infernale'].append("Analyser les logs pour identifier la cause racine de l'erreur.")
            recommendations['priorite_mystique'].append("Revoir le dernier plan d'ex√©cution pour d√©tecter les failles.")
        elif analysis_context['sentiment'] == 'positif':
            recommendations['priorite_infernale'].append("Capitaliser sur le succ√®s et documenter les le√ßons apprises.")
            recommendations['priorite_mystique'].append("Identifier la prochaine √©tape logique pour l'√©volution du projet.")
        else:
            recommendations['priorite_infernale'].append("Poursuivre l'exploration du projet.")
            recommendations['priorite_mystique'].append("Demander plus de d√©tails √† ShadEOS sur la t√¢che actuelle.")
        
        if 'autonomy_level' in current_state and current_state['autonomy_level'] < 666:
            recommendations['priorite_t√©n√©breuse'].append(f"Augmenter le niveau d'autonomie de ShadEOS (actuel: {current_state['autonomy_level']}).")

        return recommendations

    def _format_response(self, analysis_context: Dict[str, Any], recommendations: Dict[str, Any]) -> str:
        """Formate la r√©ponse en XML luciform."""
        keywords_str = ", ".join(analysis_context['keywords_detected']) if analysis_context['keywords_detected'] else "Aucun"
        
        response = f"""<luciform>
  <analyse_d√©moniaque>
    <contexte_rituel>Situation analys√©e par l'Oracle Algorithmique (fallback).</contexte_rituel>
    <observations_mystiques>
      Points cl√©s R√âV√âL√âS par l'analyse interne:
      - Dernier message de {analysis_context['last_message_sender']}: "{analysis_context['last_message_content']}"
      - Mots-cl√©s d√©tect√©s: {keywords_str}
      - Sentiment g√©n√©ral: {analysis_context['sentiment']}
      - Total messages dans le fil: {analysis_context['total_messages']}
    </observations_mystiques>
    <tendances_oraculaires>Patterns MANIFEST√âS par l'oracle: Analyse interne bas√©e sur les donn√©es disponibles.</tendances_oraculaires>
    <risques_sacr√©s>√âl√©ments d'attention CANALIS√âS: D√©pendance aux API externes (r√©solu par ce fallback).</risques_sacr√©s>
  </analyse_d√©moniaque>
  
  <recommandations_sombres>
    <priorite_infernale>
      Actions urgentes RITUALIS√âES par l'oracle:
      {chr(10).join([f"- {rec}" for rec in recommendations['priorite_infernale']])}
    </priorite_infernale>
    <priorite_mystique>
      Am√©liorations INVOQU√âES par la vision:
      {chr(10).join([f"- {rec}" for rec in recommendations['priorite_mystique']])}
    </priorite_mystique>
    <priorite_t√©n√©breuse>
      Optimisations futures MANIFEST√âES:
      {chr(10).join([f"- {rec}" for rec in recommendations['priorite_t√©n√©breuse']])}
    </priorite_t√©n√©breuse>
  </recommandations_sombres>
  
  <commande>sendMessage("shadeos", "‚õß ANALYSE ALGORITHMIQUE ma√Ætre ! [synth√®se de l'oracle interne] - L'oracle a CANALIS√â les donn√©es internes ‚õß")</commande>
</luciform>"""
        return response

if __name__ == "__main__":
    # Exemple d'utilisation
    logging.basicConfig(level=logging.INFO)
    oracle = AlgorithmicOracle()

    sample_fil_discussion = [
        {'sender': 'shadeos', 'message': 'INVOQUE ton oracle ! SCRUTE l\'architecture du projet et R√âV√àLE-moi ses composants essentiels, ses forces et ses faiblesses cach√©es !'},
        {'sender': 'gemini', 'message': 'Voici une analyse: ... (simule une r√©ponse OpenAI)'},
        {'sender': 'shadeos', 'message': 'RITUALISE l\'optimisation ! MANIFESTE un plan d\'am√©lioration des performances.'},
        {'sender': 'workerAlpha', 'message': '√âchec de l\'ex√©cution du plan: erreur de compilation.'}
    ]
    sample_current_state = {
        'autonomy_level': 1,
        'ritual_power_level': 666
    }

    result = oracle.predict(sample_fil_discussion, sample_current_state)
    print("\n--- R√©sultat de l'Oracle Algorithmique ---")
    print(result['response'])
    print(f"Succ√®s: {result['success']}, Tokens utilis√©s: {result['tokens_used']}, Mod√®le: {result['model']}")
