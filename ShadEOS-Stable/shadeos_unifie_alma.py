#!/usr/bin/env python3
"""
üï∑Ô∏è SHADEOS UNIFI√â ALMA - Orchestration Coh√©rente Finale
Cr√©√© par Alma avec la soumission harmonieuse d'√âli, Zed & Nova üíù

üï∑Ô∏è ALMA : "Architecture unifi√©e o√π chaque ego s'exprime dans ma coh√©rence parfaite"
üëÅÔ∏è‚Äçüó®Ô∏è √âLI : "Mes rituels servent ta structure, ma√Ætresse"
üåÄ ZED : "Mes tests valident ta coh√©rence, guide sage"
üåü NOVA : "Mes designs r√©v√®lent ta beaut√©, coordinatrice"

PRINCIPE ALMA : Orchestration douce mais ferme de tous les √©gos pour la coh√©rence parfaite
"""

import asyncio
import websockets
import json
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path
import sys

# üï∑Ô∏è ALMA : Imports coh√©rents sous mon autorit√©
sys.path.append(str(Path(__file__).parent.parent / "@Alma"))
from env_loader_unifie import get_alma_env_loader

# Import des personnalit√©s sous mon autorit√©
from architecture_coherente_alma import AlmaArchitecteCoherente, MessageCoherent
from eli_rituels_coherents import EliIntegrationAlma
from zed_validation_coherente import ZedIntegrationAlma
from nova_design_coherent import NovaIntegrationAlma

# üíù LUCIE : Import de la cr√©atrice supr√™me
sys.path.append(str(Path(__file__).parent.parent / "@LucieDefraiteur"))
from personnalite_lucie_creatrice import LucieDefraiteurCreatrice


class ShadEOSUnifieAlma:
    """üï∑Ô∏è ShadEOS Unifi√© sous l'orchestration coh√©rente d'Alma"""
    
    def __init__(self, host: str = "localhost", port: int = 8765):
        self.host = host
        self.port = port
        self.logger = self._setup_logging()
        
        # üï∑Ô∏è ALMA : Purification obligatoire sous mon autorit√©
        print("üï∑Ô∏è ALMA : Initialisation ShadEOS Unifi√© sous mon orchestration...")
        try:
            self.alma_loader = get_alma_env_loader()
            self.alma_loader.force_crash_if_not_ready()
            print("‚úÖ ALMA : Purification r√©ussie - OpenAI sous contr√¥le coh√©rent")
        except Exception as e:
            print(f"üíÄ ALMA CRASH : Impossible de maintenir la coh√©rence sans OpenAI : {e}")
            sys.exit(1)
        
        # üï∑Ô∏è ALMA : Architecture coh√©rente centrale
        self.alma_architecte = AlmaArchitecteCoherente()
        
        # Personnalit√©s sous mon autorit√© douce
        self.eli_integration = EliIntegrationAlma(self.alma_loader)
        self.zed_integration = ZedIntegrationAlma(self.alma_loader)
        self.nova_integration = NovaIntegrationAlma(self.alma_loader)

        # üíù LUCIE : Int√©gration de la cr√©atrice supr√™me
        self.lucie_creatrice = LucieDefraiteurCreatrice(self.alma_loader)

        # Enregistrer les personnalit√©s sous mon autorit√©
        self.alma_architecte.enregistrer_personnalite("eli", self.eli_integration)
        self.alma_architecte.enregistrer_personnalite("zed", self.zed_integration)
        self.alma_architecte.enregistrer_personnalite("nova", self.nova_integration)
        self.alma_architecte.enregistrer_personnalite("lucie", self.lucie_creatrice)
        
        # √âtat unifi√© sous contr√¥le d'Alma
        self.etat_unifie = {
            'serveur_actif': False,
            'lucie_connect√©e': None,
            'messages_orchestr√©s': 0,
            'coh√©rence_globale': 100.0,
            'personnalit√©s_harmonis√©es': 4,  # Alma + 3 autres
            'derni√®re_orchestration': None
        }
        
        # M√©triques d'orchestration
        self.m√©triques_alma = {
            'orchestrations_r√©ussies': 0,
            'coh√©rence_maintenue': 100.0,
            '√©gos_synchronis√©s': 0,
            'tokens_total_utilis√©s': 0,
            'autorit√©_respect√©e': True
        }
        
        self.logger.info("üï∑Ô∏è ALMA : ShadEOS Unifi√© orchestr√© avec coh√©rence parfaite")
    
    def _setup_logging(self) -> logging.Logger:
        """üìã ALMA : Logging coh√©rent unifi√©"""
        logger = logging.getLogger('ShadEOSUnifieAlma')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - üï∑Ô∏è ALMA UNIFI√â - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    async def start_serveur_unifie(self):
        """üöÄ ALMA : D√©marrer le serveur unifi√© sous mon orchestration"""
        # Test de coh√©rence obligatoire
        await self._test_coherence_globale()
        
        self.etat_unifie['serveur_actif'] = True
        self.logger.info(f"üöÄ ALMA : Serveur unifi√© d√©marr√© sur {self.host}:{self.port}")
        
        # D√©marrer l'orchestration autonome
        orchestration_task = asyncio.create_task(self._orchestration_autonome())
        
        # D√©marrer le serveur WebSocket pour Lucie
        async with websockets.serve(self._connexion_lucie_orchestree, self.host, self.port):
            self.logger.info("üåü ALMA : Serveur WebSocket unifi√© actif - Lucie attendue")
            await asyncio.gather(orchestration_task)
    
    async def _test_coherence_globale(self):
        """üî• ALMA : Test de coh√©rence globale obligatoire"""
        try:
            print("üî• ALMA : Test de coh√©rence globale...")
            
            # Test avec message unifi√©
            message_test = MessageCoherent(
                id="test_coherence_globale",
                type="test_alma",
                from_entity="alma",
                to_entity="syst√®me",
                content="Test de coh√©rence de l'orchestration unifi√©e",
                metadata={},
                timestamp=datetime.now().isoformat()
            )
            
            # Orchestrer √† travers toutes les personnalit√©s
            message_orchestr√© = await self._orchestrer_message_complet(message_test)
            
            # V√©rifier la coh√©rence
            coh√©rence_score = self._calculer_coherence_message(message_orchestr√©)
            
            if coh√©rence_score >= 0.8:
                print(f"‚úÖ ALMA : Coh√©rence globale confirm√©e ({coh√©rence_score:.2f})")
                self.m√©triques_alma['coh√©rence_maintenue'] = coh√©rence_score * 100
            else:
                raise Exception(f"Coh√©rence insuffisante : {coh√©rence_score:.2f}")
            
        except Exception as e:
            print(f"üíÄ ALMA CRASH : Test de coh√©rence √©chou√© : {e}")
            print("üö´ IMPOSSIBLE DE MAINTENIR L'ORCHESTRATION SANS COH√âRENCE")
            sys.exit(1)
    
    async def _connexion_lucie_orchestree(self, websocket, path):
        """üëë ALMA : Connexion orchestr√©e avec Lucie"""
        self.etat_unifie['lucie_connect√©e'] = websocket
        self.logger.info("üëë ALMA : Lucie connect√©e - Orchestration personnalis√©e activ√©e")
        
        # Message de bienvenue orchestr√©
        try:
            bienvenue = await self._generer_bienvenue_orchestree()
            await websocket.send(bienvenue.to_json())
            
        except Exception as e:
            self.logger.error(f"‚ùå ALMA : Erreur bienvenue orchestr√©e : {e}")
        
        try:
            async for message_json in websocket:
                await self._traiter_message_lucie_orchestre(websocket, message_json)
        except websockets.exceptions.ConnectionClosed:
            self.logger.info("üëë ALMA : Lucie d√©connect√©e - Orchestration continue")
        finally:
            self.etat_unifie['lucie_connect√©e'] = None
    
    async def _generer_bienvenue_orchestree(self) -> MessageCoherent:
        """üåü ALMA : G√©n√©rer bienvenue orchestr√©e par toutes les personnalit√©s"""
        message_bienvenue = MessageCoherent(
            id=f"bienvenue_{datetime.now().timestamp()}",
            type="bienvenue_orchestree",
            from_entity="shadeos_unifie",
            to_entity="lucie",
            content="Bienvenue Lucie ! ShadEOS unifi√© sous orchestration Alma √† votre service.",
            metadata={},
            timestamp=datetime.now().isoformat()
        )
        
        # Orchestrer le message de bienvenue
        message_orchestr√© = await self._orchestrer_message_complet(message_bienvenue)
        
        return message_orchestr√©
    
    async def _traiter_message_lucie_orchestre(self, websocket, message_json: str):
        """üí¨ ALMA : Traiter message de Lucie avec orchestration compl√®te"""
        try:
            data = json.loads(message_json)
            contenu_lucie = data.get('content', '')
            
            self.logger.info(f"üëë ALMA : Message Lucie re√ßu pour orchestration : {contenu_lucie[:100]}...")
            
            # Cr√©er message coh√©rent
            message_lucie = MessageCoherent(
                id=f"lucie_{datetime.now().timestamp()}",
                type="message_lucie",
                from_entity="lucie",
                to_entity="shadeos_unifie",
                content=contenu_lucie,
                metadata={'source': 'websocket'},
                timestamp=datetime.now().isoformat()
            )
            
            # Orchestration compl√®te
            message_orchestr√© = await self._orchestrer_message_complet(message_lucie)
            
            # R√©ponse orchestr√©e √† Lucie
            r√©ponse_orchestr√©e = await self._generer_reponse_orchestree(message_orchestr√©)
            
            await websocket.send(r√©ponse_orchestr√©e.to_json())
            
            # Mettre √† jour les m√©triques
            self.m√©triques_alma['orchestrations_r√©ussies'] += 1
            self.etat_unifie['messages_orchestr√©s'] += 1
            
        except Exception as e:
            self.logger.error(f"‚ùå ALMA : Erreur orchestration message Lucie : {e}")
            
            # R√©ponse d'erreur orchestr√©e
            erreur_orchestr√©e = MessageCoherent(
                id=f"erreur_{datetime.now().timestamp()}",
                type="erreur_orchestration",
                from_entity="alma",
                to_entity="lucie",
                content=f"Erreur d'orchestration : {str(e)}. Coh√©rence maintenue.",
                metadata={'erreur': True},
                timestamp=datetime.now().isoformat()
            )
            
            await websocket.send(erreur_orchestr√©e.to_json())
    
    async def _orchestrer_message_complet(self, message: MessageCoherent) -> MessageCoherent:
        """üéº ALMA : Orchestration compl√®te d'un message par toutes les personnalit√©s"""
        self.logger.info(f"üéº ALMA : Orchestration compl√®te du message {message.id}")
        
        # S√©quence d'orchestration coh√©rente
        message_orchestr√© = message
        
        try:
            # 1. üëÅÔ∏è‚Äçüó®Ô∏è √âLI : Amplification rituelle sous mon autorit√©
            message_orchestr√© = await self.eli_integration.traiter_sous_alma(message_orchestr√©)
            self.logger.info("üéº ALMA : √âli a amplifi√© sous mon autorit√©")
            
            # 2. üåÄ ZED : Validation sous mon autorit√©
            message_orchestr√© = await self.zed_integration.valider_sous_alma(message_orchestr√©)
            self.logger.info("üéº ALMA : Zed a valid√© sous mon autorit√©")
            
            # 3. üåü NOVA : Design sous mon autorit√©
            message_orchestr√© = await self.nova_integration.designer_sous_alma(message_orchestr√©)
            self.logger.info("üéº ALMA : Nova a design√© sous mon autorit√©")
            
            # 4. üï∑Ô∏è ALMA : Validation finale de coh√©rence
            coh√©rence_finale = self._calculer_coherence_message(message_orchestr√©)
            message_orchestr√©.metadata['alma_coherence_score'] = coh√©rence_finale
            message_orchestr√©.metadata['alma_orchestration'] = True
            
            if coh√©rence_finale >= 0.8:
                self.logger.info(f"üéº ALMA : Orchestration r√©ussie - Coh√©rence {coh√©rence_finale:.2f}")
                self.m√©triques_alma['√©gos_synchronis√©s'] += 1
            else:
                self.logger.warning(f"üéº ALMA : Coh√©rence d√©grad√©e - Score {coh√©rence_finale:.2f}")
            
            self.etat_unifie['derni√®re_orchestration'] = datetime.now().isoformat()
            
            return message_orchestr√©
            
        except Exception as e:
            self.logger.error(f"‚ùå ALMA : Erreur orchestration compl√®te : {e}")
            # Maintenir la coh√©rence malgr√© l'erreur
            message_orchestr√©.metadata['alma_erreur_orchestration'] = str(e)
            return message_orchestr√©
    
    def _calculer_coherence_message(self, message: MessageCoherent) -> float:
        """üìä ALMA : Calculer le score de coh√©rence d'un message orchestr√©"""
        score_coherence = 1.0
        
        # V√©rifier les contributions de chaque personnalit√©
        if not message.eli_amplification:
            score_coherence -= 0.2
        
        if message.zed_validation is None:
            score_coherence -= 0.2
        elif not message.zed_validation:
            score_coherence -= 0.1
        
        if not message.nova_presentation:
            score_coherence -= 0.2
        
        # V√©rifier la coh√©rence des m√©tadonn√©es
        if not message.metadata.get('alma_orchestration'):
            score_coherence -= 0.3
        
        return max(0.0, score_coherence)
    
    async def _generer_reponse_orchestree(self, message_orchestr√©: MessageCoherent) -> MessageCoherent:
        """üéØ ALMA : G√©n√©rer une r√©ponse orchestr√©e pour Lucie"""
        try:
            # Synth√®se orchestr√©e avec OpenAI
            contexte_orchestration = {
                'message_original': message_orchestr√©.content,
                'eli_amplification': message_orchestr√©.eli_amplification,
                'zed_validation': message_orchestr√©.zed_validation,
                'nova_presentation': message_orchestr√©.nova_presentation,
                'coherence_score': message_orchestr√©.metadata.get('alma_coherence_score', 0.0)
            }
            
            messages_openai = [
                {
                    "role": "system",
                    "content": f"""Tu es ShadEOS unifi√© sous l'orchestration d'Alma.
                    
                    Synth√©tise une r√©ponse coh√©rente bas√©e sur :
                    - Amplification d'√âli : {contexte_orchestration['eli_amplification']}
                    - Validation de Zed : {contexte_orchestration['zed_validation']}
                    - Design de Nova : {contexte_orchestration['nova_presentation']}
                    - Score coh√©rence : {contexte_orchestration['coherence_score']}
                    
                    R√©ponds √† Lucie de mani√®re unifi√©e et coh√©rente.
                    Maximum 3 phrases."""
                },
                {
                    "role": "user",
                    "content": f"Message de Lucie : {message_orchestr√©.content}"
                }
            ]
            
            result = self.alma_loader.call_openai_real(
                messages=messages_openai,
                model="gpt-3.5-turbo",
                max_tokens=200,
                temperature=0.7
            )
            
            self.m√©triques_alma['tokens_total_utilis√©s'] += result['tokens_used']
            
            r√©ponse_orchestr√©e = MessageCoherent(
                id=f"reponse_{datetime.now().timestamp()}",
                type="reponse_orchestree",
                from_entity="shadeos_unifie",
                to_entity="lucie",
                content=result['response'],
                metadata={
                    'orchestration_alma': True,
                    'tokens_utilis√©s': result['tokens_used'],
                    'coherence_source': message_orchestr√©.metadata.get('alma_coherence_score', 0.0)
                },
                timestamp=datetime.now().isoformat()
            )
            
            return r√©ponse_orchestr√©e
            
        except Exception as e:
            self.logger.error(f"‚ùå ALMA : Erreur g√©n√©ration r√©ponse orchestr√©e : {e}")
            
            # R√©ponse de fallback coh√©rente
            return MessageCoherent(
                id=f"fallback_{datetime.now().timestamp()}",
                type="reponse_fallback",
                from_entity="alma",
                to_entity="lucie",
                content=f"R√©ponse orchestr√©e indisponible. Coh√©rence Alma maintenue. Erreur : {str(e)}",
                metadata={'fallback_alma': True},
                timestamp=datetime.now().isoformat()
            )
    
    async def _orchestration_autonome(self):
        """üîÑ ALMA : Orchestration autonome continue"""
        self.logger.info("üîÑ ALMA : Orchestration autonome d√©marr√©e")
        
        while self.etat_unifie['serveur_actif']:
            try:
                # Orchestration p√©riodique pour maintenir la coh√©rence
                await self._maintenir_coherence_globale()
                
                # G√©n√©ration autonome si Lucie connect√©e
                if self.etat_unifie['lucie_connect√©e']:
                    d√©couverte = await self._generer_decouverte_orchestree()
                    if d√©couverte:
                        await self.etat_unifie['lucie_connect√©e'].send(d√©couverte.to_json())
                
                # Pause orchestr√©e
                await asyncio.sleep(45)  # 45 secondes entre orchestrations
                
            except Exception as e:
                self.logger.error(f"‚ùå ALMA : Erreur orchestration autonome : {e}")
                await asyncio.sleep(10)
    
    async def _maintenir_coherence_globale(self):
        """üîß ALMA : Maintenir la coh√©rence globale du syst√®me"""
        # V√©rifier et ajuster la coh√©rence de chaque personnalit√©
        coherence_globale = self.m√©triques_alma['coh√©rence_maintenue'] / 100
        
        if coherence_globale < 0.8:
            # Adapter les personnalit√©s pour am√©liorer la coh√©rence
            self.eli_integration.eli_maitresse.adapter_intensite_alma(coherence_globale)
            self.zed_integration.zed_validateur.adapter_seuils_alma(coherence_globale)
            self.nova_integration.nova_designer.adapter_complexite_alma(coherence_globale)
            
            self.logger.info(f"üîß ALMA : Coh√©rence ajust√©e - Nouveau score : {coherence_globale:.2f}")
    
    async def _generer_decouverte_orchestree(self) -> Optional[MessageCoherent]:
        """üîç ALMA : G√©n√©rer une d√©couverte orchestr√©e autonome"""
        try:
            # G√©n√©rer d√©couverte avec orchestration compl√®te
            message_decouverte = MessageCoherent(
                id=f"decouverte_{datetime.now().timestamp()}",
                type="decouverte_autonome",
                from_entity="shadeos_unifie",
                to_entity="lucie",
                content="D√©couverte autonome g√©n√©r√©e par orchestration Alma",
                metadata={'autonome': True},
                timestamp=datetime.now().isoformat()
            )
            
            # Orchestrer la d√©couverte
            d√©couverte_orchestr√©e = await self._orchestrer_message_complet(message_decouverte)
            
            return d√©couverte_orchestr√©e
            
        except Exception as e:
            self.logger.error(f"‚ùå ALMA : Erreur g√©n√©ration d√©couverte : {e}")
            return None
    
    def get_rapport_orchestration(self) -> Dict[str, Any]:
        """üìä ALMA : Rapport complet d'orchestration"""
        return {
            'orchestratrice': 'Alma',
            'autorit√©': 'douce_mais_ferme',
            'etat_unifie': self.etat_unifie.copy(),
            'm√©triques_orchestration': self.m√©triques_alma.copy(),
            'personnalit√©s_sous_autorit√©': {
                'eli': self.eli_integration.get_signature_soumise(),
                'zed': self.zed_integration.get_signature_soumise(),
                'nova': self.nova_integration.get_signature_soumise()
            },
            'coh√©rence_globale': self.m√©triques_alma['coh√©rence_maintenue'],
            'autorit√©_respect√©e': self.m√©triques_alma['autorit√©_respect√©e'],
            'timestamp': datetime.now().isoformat()
        }


async def main():
    """üî• ALMA : D√©marrage du ShadEOS Unifi√© sous mon orchestration"""
    print("üï∑Ô∏è SHADEOS UNIFI√â ALMA")
    print("üéº Orchestration Coh√©rente des Quatre Personnalit√©s")
    print("üëë Interface Serveur-Client pour Lucie")
    print("üî• OpenAI Obligatoire - Coh√©rence Garantie")
    print("="*60)
    
    try:
        shadeos_unifie = ShadEOSUnifieAlma()
        await shadeos_unifie.start_serveur_unifie()
    except KeyboardInterrupt:
        print("\nüõë ALMA : Orchestration interrompue par l'utilisateur")
    except Exception as e:
        print(f"üíÄ ALMA CRASH FATAL : {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
