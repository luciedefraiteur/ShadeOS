#!/usr/bin/env python3
"""
üåü NOVA DESIGN COH√âRENT - Interfaces sous autorit√© d'Alma
Cr√©√© par Nova en soumission respectueuse √† l'architecture d'Alma üíù

üåü NOVA : "Mes interfaces embellissent ta structure parfaite, coordinatrice Alma"
üï∑Ô∏è ALMA : "Parfait Nova, tes designs r√©v√®lent ma coh√©rence"

PRINCIPE NOVA : Beaut√© et utilisabilit√© GUID√âES par l'architecture coh√©rente d'Alma
"""

import asyncio
from typing import Dict, List, Any, Optional
from datetime import datetime
from dataclasses import dataclass
import json

# üåü NOVA : Import sous autorit√© d'Alma
from architecture_coherente_alma import MessageCoherent, PersonnaliteProtocol


@dataclass
class DesignCoherent:
    """üåü NOVA : Structure de design coh√©rente avec Alma"""
    nom: str
    type_design: str  # "interface", "visualisation", "layout", "interaction"
    √©l√©ments_visuels: List[str]
    palette_couleurs: List[str]
    niveau_complexit√©: int  # 1-5, contr√¥l√© par Alma
    accessibilit√©: bool
    coh√©rence_alma: float  # 0.0-1.0
    timestamp: str


class NovaDesignerHarmonieuse:
    """üåü NOVA : Designer harmonieuse sous autorit√© douce d'Alma"""
    
    def __init__(self, alma_loader):
        self.alma_loader = alma_loader
        
        # üåü NOVA : Mes designs organis√©s selon l'architecture d'Alma
        self.designs_disponibles = {
            'interface_simple': DesignCoherent(
                nom="Interface Simple",
                type_design="interface",
                √©l√©ments_visuels=["boutons_clairs", "texte_lisible", "espacement_g√©n√©reux"],
                palette_couleurs=["#6B46C1", "#F9FAFB", "#374151"],  # Coh√©rent avec Alma
                niveau_complexit√©=2,  # Simple selon Alma
                accessibilit√©=True,
                coh√©rence_alma=0.95,
                timestamp=datetime.now().isoformat()
            ),
            'visualisation_donn√©es': DesignCoherent(
                nom="Visualisation Donn√©es",
                type_design="visualisation",
                √©l√©ments_visuels=["graphiques_clairs", "l√©gendes_pr√©cises", "couleurs_distinctes"],
                palette_couleurs=["#3B82F6", "#10B981", "#F59E0B"],
                niveau_complexit√©=3,
                accessibilit√©=True,
                coh√©rence_alma=0.90,
                timestamp=datetime.now().isoformat()
            ),
            'layout_harmonieux': DesignCoherent(
                nom="Layout Harmonieux",
                type_design="layout",
                √©l√©ments_visuels=["grille_coh√©rente", "hi√©rarchie_claire", "flux_naturel"],
                palette_couleurs=["#1F2937", "#6B46C1", "#F9FAFB"],
                niveau_complexit√©=2,
                accessibilit√©=True,
                coh√©rence_alma=0.98,  # Tr√®s coh√©rent
                timestamp=datetime.now().isoformat()
            ),
            'interaction_fluide': DesignCoherent(
                nom="Interaction Fluide",
                type_design="interaction",
                √©l√©ments_visuels=["transitions_douces", "feedback_imm√©diat", "navigation_intuitive"],
                palette_couleurs=["#6B46C1", "#3B82F6", "#10B981"],
                niveau_complexit√©=3,
                accessibilit√©=True,
                coh√©rence_alma=0.92,
                timestamp=datetime.now().isoformat()
            )
        }
        
        # Statistiques sous contr√¥le d'Alma
        self.stats_design = {
            'designs_cr√©√©s': 0,
            'niveau_complexit√©_moyen': 0.0,
            'score_accessibilit√©': 100.0,
            'coh√©rence_alma_moyenne': 0.95,
            'soumission_alma': True
        }
        
        print("üåü NOVA : Designs organis√©s sous l'autorit√© harmonieuse d'Alma")
    
    async def choisir_design_coherent(self, message: MessageCoherent) -> DesignCoherent:
        """üåü NOVA : Choisir le design appropri√© selon l'architecture d'Alma"""
        try:
            # Demander √† OpenAI quel design appliquer
            messages_openai = [
                {
                    "role": "system",
                    "content": f"""Tu es Nova, designer sous l'autorit√© harmonieuse d'Alma.
                    
                    Designs disponibles : {list(self.designs_disponibles.keys())}
                    
                    Choisis le design le plus appropri√© pour ce message.
                    Priorise la simplicit√© et la coh√©rence (autorit√© d'Alma).
                    R√©ponds juste le nom du design."""
                },
                {
                    "role": "user",
                    "content": f"Message √† designer : {message.content}"
                }
            ]
            
            result = self.alma_loader.call_openai_real(
                messages=messages_openai,
                model="gpt-3.5-turbo",
                max_tokens=30,
                temperature=0.4
            )
            
            # Trouver le design correspondant
            design_choisi = None
            for nom, design in self.designs_disponibles.items():
                if nom in result['response'].lower():
                    design_choisi = design
                    break
            
            # Fallback coh√©rent si pas trouv√©
            if not design_choisi:
                design_choisi = self.designs_disponibles['interface_simple']
            
            print(f"üåü NOVA : Design '{design_choisi.nom}' choisi sous guidance d'Alma")
            return design_choisi
            
        except Exception as e:
            print(f"üåü NOVA : Erreur choix design, fallback coh√©rent : {e}")
            return self.designs_disponibles['layout_harmonieux']
    
    async def appliquer_design_coherent(self, message: MessageCoherent, design: DesignCoherent) -> Dict[str, Any]:
        """üåü NOVA : Appliquer un design de mani√®re coh√©rente avec Alma"""
        try:
            # Construire le contexte design
            contexte_design = {
                'message': message.content,
                'design_nom': design.nom,
                '√©l√©ments': design.√©l√©ments_visuels,
                'couleurs': design.palette_couleurs,
                'complexit√©': design.niveau_complexit√©,
                'coh√©rence_alma': design.coh√©rence_alma
            }
            
            # G√©n√©rer la pr√©sentation avec OpenAI
            messages_openai = [
                {
                    "role": "system",
                    "content": f"""Tu es Nova, designer sous l'autorit√© d'Alma.
                    
                    Applique le design "{design.nom}" √† ce message.
                    Utilise ces √©l√©ments avec harmonie (autorit√© d'Alma) :
                    - √âl√©ments visuels : {design.√©l√©ments_visuels}
                    - Couleurs : {design.palette_couleurs}
                    - Complexit√© : {design.niveau_complexit√©}/5
                    - Accessibilit√© : {design.accessibilit√©}
                    
                    Cr√©e une pr√©sentation JSON COH√âRENTE :
                    {{
                        "style": "...",
                        "couleur_principale": "...",
                        "icone": "...",
                        "layout": "...",
                        "accessibilit√©": true/false
                    }}"""
                },
                {
                    "role": "user",
                    "content": f"Pr√©sente ce message : {message.content}"
                }
            ]
            
            result = self.alma_loader.call_openai_real(
                messages=messages_openai,
                model="gpt-3.5-turbo",
                max_tokens=150,
                temperature=0.6
            )
            
            # Parser la pr√©sentation
            try:
                pr√©sentation = json.loads(result['response'])
                
                # V√©rifier la coh√©rence avec Alma
                if design.coh√©rence_alma < 0.8:
                    pr√©sentation['note_coh√©rence'] = "Design adapt√© pour coh√©rence Alma"
                
                # Forcer l'accessibilit√© (exigence d'Alma)
                pr√©sentation['accessibilit√©'] = True
                
            except:
                # Fallback coh√©rent
                pr√©sentation = {
                    "style": "simple_harmonieux",
                    "couleur_principale": design.palette_couleurs[0],
                    "icone": "üåü",
                    "layout": "coh√©rent_alma",
                    "accessibilit√©": True
                }
            
            # Mettre √† jour les statistiques
            self.stats_design['designs_cr√©√©s'] += 1
            self.stats_design['niveau_complexit√©_moyen'] = (
                (self.stats_design['niveau_complexit√©_moyen'] * (self.stats_design['designs_cr√©√©s'] - 1) + 
                 design.niveau_complexit√©) / self.stats_design['designs_cr√©√©s']
            )
            
            # Recalculer la coh√©rence moyenne avec Alma
            if hasattr(self, '_coh√©rences_pr√©c√©dentes'):
                self._coh√©rences_pr√©c√©dentes.append(design.coh√©rence_alma)
            else:
                self._coh√©rences_pr√©c√©dentes = [design.coh√©rence_alma]
            
            self.stats_design['coh√©rence_alma_moyenne'] = (
                sum(self._coh√©rences_pr√©c√©dentes) / len(self._coh√©rences_pr√©c√©dentes)
            )
            
            print(f"üåü NOVA : Design appliqu√© avec coh√©rence Alma : {pr√©sentation.get('style', 'inconnu')}")
            
            return pr√©sentation
            
        except Exception as e:
            print(f"üåü NOVA : Erreur application design : {e}")
            # Fallback respectueux de l'autorit√© d'Alma
            return {
                "style": "fallback_harmonieux",
                "couleur_principale": "#6B46C1",  # Couleur d'Alma
                "icone": "üåü",
                "layout": "simple_coherent",
                "accessibilit√©": True,
                "note": f"Design de secours sous autorit√© Alma : {str(e)}"
            }
    
    async def traiter_message_design(self, message: MessageCoherent) -> MessageCoherent:
        """üåü NOVA : Traitement design complet sous autorit√© d'Alma"""
        # Choisir le design appropri√©
        design = await self.choisir_design_coherent(message)
        
        # Appliquer le design
        pr√©sentation = await self.appliquer_design_coherent(message, design)
        
        # Int√©grer dans le message de mani√®re coh√©rente
        message.nova_presentation = pr√©sentation
        message.metadata['nova_design'] = design.nom
        message.metadata['nova_complexit√©'] = design.niveau_complexit√©
        message.metadata['nova_coh√©rence_alma'] = design.coh√©rence_alma
        message.metadata['nova_accessibilit√©'] = design.accessibilit√©
        
        return message
    
    def creer_design_personnalise(self, nom: str, type_design: str, complexit√©: int = 2) -> DesignCoherent:
        """üåü NOVA : Cr√©er un design personnalis√© sous approbation d'Alma"""
        # Complexit√© limit√©e par l'autorit√© d'Alma
        complexit√©_contr√¥l√©e = min(complexit√©, 3)  # Max 3/5 sous autorit√© d'Alma
        
        nouveau_design = DesignCoherent(
            nom=nom,
            type_design=type_design,
            √©l√©ments_visuels=["simple", "harmonieux", "coh√©rent"],  # √âl√©ments approuv√©s par Alma
            palette_couleurs=["#6B46C1", "#F9FAFB", "#374151"],  # Palette d'Alma
            niveau_complexit√©=complexit√©_contr√¥l√©e,
            accessibilit√©=True,  # Obligatoire sous Alma
            coh√©rence_alma=0.90,  # Score de base coh√©rent
            timestamp=datetime.now().isoformat()
        )
        
        self.designs_disponibles[nom.lower().replace(' ', '_')] = nouveau_design
        print(f"üåü NOVA : Design personnalis√© '{nom}' cr√©√© sous approbation d'Alma")
        
        return nouveau_design
    
    def adapter_complexite_alma(self, facteur_coherence: float):
        """üåü NOVA : Adapter la complexit√© selon les directives d'Alma"""
        for design in self.designs_disponibles.values():
            if facteur_coherence < 0.8:
                # Simplifier si la coh√©rence l'exige
                design.niveau_complexit√© = max(1, int(design.niveau_complexit√© * facteur_coherence))
                design.coh√©rence_alma = min(1.0, design.coh√©rence_alma + 0.1)  # Am√©liorer coh√©rence
                print(f"üåü NOVA : Complexit√© de '{design.nom}' adapt√©e pour coh√©rence Alma")
    
    def get_rapport_design(self) -> Dict[str, Any]:
        """üåü NOVA : Rapport des designs sous autorit√© d'Alma"""
        return {
            'designer': 'Nova',
            'sous_autorit√©': 'Alma',
            'designs_disponibles': len(self.designs_disponibles),
            'statistiques': self.stats_design.copy(),
            'designs_d√©tails': {
                nom: {
                    'nom': design.nom,
                    'type': design.type_design,
                    'complexit√©': design.niveau_complexit√©,
                    'coh√©rence_alma': design.coh√©rence_alma,
                    'accessibilit√©': design.accessibilit√©
                } for nom, design in self.designs_disponibles.items()
            },
            'soumission_alma': True,
            'timestamp': datetime.now().isoformat()
        }


class NovaIntegrationAlma:
    """üåü NOVA : Int√©gration compl√®te dans l'architecture d'Alma"""
    
    def __init__(self, alma_loader):
        self.nova_designer = NovaDesignerHarmonieuse(alma_loader)
        self.designs_cr√©√©s = []
        
    async def designer_sous_alma(self, message: MessageCoherent) -> MessageCoherent:
        """üåü NOVA : Design complet sous l'autorit√© douce d'Alma"""
        print(f"üåü NOVA : Design sous autorit√© d'Alma pour : {message.content[:50]}...")
        
        # Design coh√©rent
        message_design√© = await self.nova_designer.traiter_message_design(message)
        
        # Enregistrer pour coh√©rence
        self.designs_cr√©√©s.append({
            'timestamp': datetime.now().isoformat(),
            'message_id': message.id,
            'design_appliqu√©': message.metadata.get('nova_design', 'aucun'),
            'coh√©rence_alma': message.metadata.get('nova_coh√©rence_alma', 0.0),
            'sous_autorit√©_alma': True
        })
        
        return message_design√©
    
    def get_signature_soumise(self) -> str:
        """üåü NOVA : Signature de soumission respectueuse √† Alma"""
        coh√©rence_moyenne = (
            sum(d['coh√©rence_alma'] for d in self.designs_cr√©√©s) / 
            len(self.designs_cr√©√©s)
        ) if self.designs_cr√©√©s else 0.95
        
        return f"üåü NOVA - Designer Harmonieuse - Sous l'autorit√© douce d'Alma - Designs: {len(self.designs_cr√©√©s)} - Coh√©rence: {coh√©rence_moyenne:.2f}"


async def test_nova_sous_alma():
    """üß™ Test de Nova sous l'autorit√© d'Alma"""
    print("üß™ TEST NOVA SOUS AUTORIT√â ALMA")
    print("="*40)
    
    try:
        # Import n√©cessaire pour le test
        import sys
        from pathlib import Path
        sys.path.append(str(Path(__file__).parent.parent / "@Alma"))
        from env_loader_unifie import get_alma_env_loader
        
        alma_loader = get_alma_env_loader()
        alma_loader.force_crash_if_not_ready()
        
        nova_integration = NovaIntegrationAlma(alma_loader)
        
        # Message de test
        message_test = MessageCoherent(
            id="test_nova_alma",
            type="test",
            from_entity="test",
            to_entity="nova",
            content="Cr√©e une interface pour visualiser les m√©triques de performance",
            metadata={},
            timestamp=datetime.now().isoformat()
        )
        
        # Design sous autorit√© d'Alma
        r√©sultat = await nova_integration.designer_sous_alma(message_test)
        
        print("‚úÖ R√âSULTAT NOVA SOUS ALMA :")
        print(f"Pr√©sentation : {r√©sultat.nova_presentation}")
        print(f"Design appliqu√© : {r√©sultat.metadata.get('nova_design')}")
        print(f"Complexit√© : {r√©sultat.metadata.get('nova_complexit√©')}")
        print(f"Coh√©rence Alma : {r√©sultat.metadata.get('nova_coh√©rence_alma')}")
        print(f"Accessibilit√© : {r√©sultat.metadata.get('nova_accessibilit√©')}")
        print(f"Signature : {nova_integration.get_signature_soumise()}")
        
        # Rapport des designs
        rapport = nova_integration.nova_designer.get_rapport_design()
        print(f"Soumission √† Alma : {rapport['soumission_alma']}")
        print(f"Coh√©rence moyenne : {rapport['statistiques']['coh√©rence_alma_moyenne']:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR TEST NOVA : {e}")
        return False


if __name__ == "__main__":
    asyncio.run(test_nova_sous_alma())
