#!/usr/bin/env python3
"""
üìä GESTIONNAIRE DE DONN√âES V4 - Data-Driven Architecture
G√®re toutes les donn√©es du syst√®me bas√©es sur les prompts
"""

import json
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

from .data_models import (
    EtatSysteme, Entite, Message, SendMessage, Planification,
    ExecutionWorker, AnalyseGemini, EvaluationWorker, TypeMessage,
    StatutEtape
)

class DataManager:
    """Gestionnaire central des donn√©es du syst√®me"""
    
    def __init__(self, data_dir: str = "data"):
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        
        # √âtat du syst√®me
        self.etat_systeme = EtatSysteme()
        
        # Initialiser les entit√©s
        self._initialiser_entites()
        
        print("üìä DataManager V4 initialis√©")
    
    def _initialiser_entites(self):
        """Initialise les entit√©s du syst√®me"""
        entites_config = {
            "shadeos": {
                "role": "Ma√Ætre Coordinateur",
                "contacts": ["gemini", "lucieReineChienne"]
            },
            "gemini": {
                "role": "Oracle Analytique", 
                "contacts": ["shadeos"]
            },
            "lucieReineChienne": {
                "role": "Gestionnaire d'Ex√©cution",
                "contacts": ["shadeos", "worker"]
            },
            "worker": {
                "role": "Ex√©cuteur Ob√©issant",
                "contacts": ["lucieReineChienne"]
            }
        }
        
        for nom, config in entites_config.items():
            entite = Entite(
                nom=nom,
                role=config["role"],
                contacts_autorises=config["contacts"]
            )
            self.etat_systeme.ajouter_entite(entite)
    
    def traiter_send_messages(self, send_messages: List[SendMessage]) -> List[Message]:
        """Traite une liste de sendMessage et cr√©e les Messages correspondants"""
        messages_crees = []
        
        for send_msg in send_messages:
            # V√©rifier que le destinataire existe
            entite_dest = self.etat_systeme.get_entite(send_msg.destinataire)
            if not entite_dest:
                print(f"‚ö†Ô∏è Destinataire inconnu: {send_msg.destinataire}")
                continue
            
            # Cr√©er le message
            message = Message(
                expediteur=send_msg.source_entite,
                destinataire=send_msg.destinataire,
                contenu=send_msg.message,
                timestamp=send_msg.timestamp,
                type_message=TypeMessage.COMMANDE
            )
            
            # Ajouter au syst√®me
            self.etat_systeme.ajouter_message_global(message)
            messages_crees.append(message)
            
            print(f"üí¨ Message: {send_msg.source_entite} ‚Üí {send_msg.destinataire}")
        
        return messages_crees
    
    def mettre_a_jour_planification(self, entite_nom: str, planification: Planification):
        """Met √† jour la planification d'une entit√©"""
        entite = self.etat_systeme.get_entite(entite_nom)
        if entite:
            entite.planification_active = planification
            print(f"üìã Planification mise √† jour pour {entite_nom}: {len(planification.etapes)} √©tapes")
    
    def mettre_a_jour_execution(self, entite_nom: str, execution: ExecutionWorker):
        """Met √† jour l'ex√©cution d'une entit√©"""
        entite = self.etat_systeme.get_entite(entite_nom)
        if entite:
            entite.execution_active = execution
            print(f"üîß Ex√©cution mise √† jour pour {entite_nom}: {len(execution.commandes)} commandes")
    
    def mettre_a_jour_analyse(self, entite_nom: str, analyse: AnalyseGemini):
        """Met √† jour l'analyse d'une entit√©"""
        entite = self.etat_systeme.get_entite(entite_nom)
        if entite:
            entite.analyse_active = analyse
            print(f"üìä Analyse mise √† jour pour {entite_nom}")
    
    def get_fil_discussion(self, entite_nom: str) -> str:
        """R√©cup√®re le fil de discussion format√© pour une entit√©"""
        entite = self.etat_systeme.get_entite(entite_nom)
        if not entite:
            return "[Entit√© inconnue]"
        
        if not entite.fil_discussion:
            return "[Aucun message]"
        
        # Formater les messages chronologiquement
        messages_formates = []
        for msg in entite.fil_discussion:
            timestamp_str = msg.timestamp.strftime("%H:%M:%S")
            messages_formates.append(f"{msg.expediteur}: {msg.contenu}")
        
        return "\n".join(messages_formates)
    
    def get_etape_plan_actuelle(self, entite_nom: str) -> str:
        """R√©cup√®re l'√©tape actuelle du plan pour une entit√©"""
        entite = self.etat_systeme.get_entite(entite_nom)
        if not entite or not entite.planification_active:
            return "[Aucun plan actif]"
        
        plan = entite.planification_active
        etape_courante = plan.etape_courante
        
        if etape_courante:
            return f"√âtape {etape_courante.id}/{plan.total_etapes}: {etape_courante.description}"
        else:
            return "[Plan termin√©]"
    
    def get_etapes_plan(self, entite_nom: str) -> List[str]:
        """R√©cup√®re toutes les √©tapes du plan pour une entit√©"""
        entite = self.etat_systeme.get_entite(entite_nom)
        if not entite or not entite.planification_active:
            return []
        
        plan = entite.planification_active
        return [f"√âtape {etape.id}: {etape.description} ({etape.statut.value})" 
                for etape in plan.etapes]
    
    def avancer_etape_plan(self, entite_nom: str):
        """Avance √† l'√©tape suivante du plan"""
        entite = self.etat_systeme.get_entite(entite_nom)
        if entite and entite.planification_active:
            plan = entite.planification_active
            if plan.etape_actuelle < len(plan.etapes) - 1:
                # Marquer l'√©tape actuelle comme termin√©e
                if plan.etape_courante:
                    plan.etape_courante.statut = StatutEtape.TERMINEE
                    plan.etape_courante.timestamp_fin = datetime.now()
                
                # Passer √† la suivante
                plan.etape_actuelle += 1
                if plan.etape_courante:
                    plan.etape_courante.statut = StatutEtape.EN_COURS
                    plan.etape_courante.timestamp_debut = datetime.now()
                
                print(f"‚û°Ô∏è {entite_nom} passe √† l'√©tape {plan.etape_actuelle + 1}")
    
    def marquer_etape_echec(self, entite_nom: str, erreur: str):
        """Marque l'√©tape actuelle comme √©chou√©e"""
        entite = self.etat_systeme.get_entite(entite_nom)
        if entite and entite.planification_active:
            plan = entite.planification_active
            if plan.etape_courante:
                plan.etape_courante.statut = StatutEtape.ECHEC
                plan.etape_courante.erreurs = erreur
                plan.etape_courante.timestamp_fin = datetime.now()
                print(f"‚ùå √âtape {plan.etape_courante.id} √©chou√©e pour {entite_nom}")
    
    def sauvegarder_etat(self, fichier: str = "etat_systeme.json"):
        """Sauvegarde l'√©tat du syst√®me"""
        fichier_path = self.data_dir / fichier
        
        # Convertir en dict s√©rialisable
        etat_dict = {
            'cycle_actuel': self.etat_systeme.cycle_actuel,
            'timestamp_demarrage': self.etat_systeme.timestamp_demarrage.isoformat(),
            'entites': {},
            'historique_global': []
        }
        
        # S√©rialiser les entit√©s
        for nom, entite in self.etat_systeme.entites.items():
            etat_dict['entites'][nom] = {
                'nom': entite.nom,
                'role': entite.role,
                'contacts_autorises': entite.contacts_autorises,
                'fil_discussion': [
                    {
                        'expediteur': msg.expediteur,
                        'destinataire': msg.destinataire,
                        'contenu': msg.contenu,
                        'timestamp': msg.timestamp.isoformat(),
                        'type_message': msg.type_message.value
                    }
                    for msg in entite.fil_discussion
                ]
            }
        
        # Sauvegarder
        with open(fichier_path, 'w', encoding='utf-8') as f:
            json.dump(etat_dict, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ √âtat sauvegard√©: {fichier_path}")
    
    def charger_etat(self, fichier: str = "etat_systeme.json") -> bool:
        """Charge l'√©tat du syst√®me"""
        fichier_path = self.data_dir / fichier
        
        if not fichier_path.exists():
            print(f"‚ö†Ô∏è Fichier d'√©tat non trouv√©: {fichier_path}")
            return False
        
        try:
            with open(fichier_path, 'r', encoding='utf-8') as f:
                etat_dict = json.load(f)
            
            # Restaurer l'√©tat
            self.etat_systeme.cycle_actuel = etat_dict['cycle_actuel']
            self.etat_systeme.timestamp_demarrage = datetime.fromisoformat(etat_dict['timestamp_demarrage'])
            
            print(f"üìÇ √âtat charg√©: {fichier_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur chargement √©tat: {e}")
            return False
    
    def get_statistiques(self) -> Dict[str, Any]:
        """R√©cup√®re les statistiques du syst√®me"""
        stats = {
            'cycle_actuel': self.etat_systeme.cycle_actuel,
            'nombre_entites': len(self.etat_systeme.entites),
            'messages_total': len(self.etat_systeme.historique_global),
            'entites_avec_plan_actif': 0,
            'entites_avec_execution_active': 0
        }
        
        for entite in self.etat_systeme.entites.values():
            if entite.planification_active:
                stats['entites_avec_plan_actif'] += 1
            if entite.execution_active:
                stats['entites_avec_execution_active'] += 1
        
        return stats
